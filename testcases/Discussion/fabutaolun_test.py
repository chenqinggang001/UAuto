# NOTE: Generated By HttpRunner v3.1.6
# FROM: har\test.har


from httprunner import HttpRunner, Config, Step, RunRequest, RunTestCase


class TestCaseTest(HttpRunner):

    config = (
        Config("教师发布讨论")
        .variables(HOST="${ENV(TestHOST)}")
        .base_url("${HOST}")
        .verify(False)
        .export(*[])
    )

    teststeps = [
        Step(
            RunRequest("1")
            .get("/forum/${ENV(LoginNameCourseAdmin_ocId)}/0")
            .with_params(
                **{"pn": "1", "ps": "10", "teacherId": "${ENV(LoginNameCourseAdmin_userid)}", "lang": "zh"}
            )
            .with_headers(
                **{
                    "Authorization": "${ENV(LoginNameCourseAdmin_token)}",
                    "Content-Type": "application/json"
                }
            )
            .validate()
            .assert_equal("status_code", 200)
        ),
        Step(
            RunRequest("2")
            .get("/users/role/${ENV(LoginNameCourseAdmin_ocId)}")
            .with_headers(**{"Authorization": "${ENV(LoginNameCourseAdmin_token)}", "Content-Type": "application/json"})
            .validate()
            .assert_equal("status_code", 200)
        ),
        Step(
            RunRequest("3")
            .options("/topic/selectInfo")
            .with_params(**{"ocId": "${ENV(LoginNameCourseAdmin_ocId)}", "discussionId": "", "type": "1"})
            .with_headers(**{"Authorization": "${ENV(LoginNameCourseAdmin_token)}", "Content-Type": "application/json"})
            .validate()
            .assert_equal("status_code", 200)
        ),
        Step(
            RunRequest("4")
            .get("/topic/selectInfo")
            .with_params(**{"ocId": "${ENV(LoginNameCourseAdmin_ocId)}", "discussionId": "", "type": "1"})
            .with_headers(**{"Authorization": "${ENV(LoginNameCourseAdmin_token)}", "Content-Type": "application/json"})
            .validate()
            .assert_equal("status_code", 200)
        ),
        Step(
            RunRequest("5")
            .options("/topic/getClassList")
            .with_params(
                **{
                    "pn": "1",
                    "ps": "9999",
                    "ocId": "${ENV(LoginNameCourseAdmin_ocId)}",
                    "keyword": "",
                    "teacherId": "",
                }
            )
            .with_headers(**{"Authorization": "${ENV(LoginNameCourseAdmin_token)}", "Content-Type": "application/json"})
            .validate()
            .assert_equal("status_code", 200)
        ),
        Step(
            RunRequest("6")
            .get("/topic/getClassList")
            .with_params(
                **{
                    "pn": "1",
                    "ps": "9999",
                    "ocId": "${ENV(LoginNameCourseAdmin_ocId)}",
                    "keyword": "",
                    "teacherId": "",
                }
            )
            .with_headers(**{"Authorization": "${ENV(LoginNameCourseAdmin_token)}", "Content-Type": "application/json"})
            .validate()
            .assert_equal("status_code", 200)
        ),
        Step(
            RunRequest("7")
            .options("/topic/publishTopic")
            .with_headers(**{"Authorization": "${ENV(LoginNameCourseAdmin_token)}", "Content-Type": "application/json"})
            .validate()
            .assert_equal("status_code", 200)
        ),
        Step(
            RunRequest("8")
            .post("/topic/publishTopic")
            .with_headers(**{"Authorization": "${ENV(LoginNameCourseAdmin_token)}", "Content-Type": "application/json"})
            .with_json(
                {
                    "title": "测试",
                    "message": "<p>测试</p>\n",
                    "ocId": "${ENV(LoginNameCourseAdmin_ocId)}",
                    "attachments": [],
                    "discussionTimeType": 1,
                    "startTime": "",
                    "endTime": "",
                    "classes": [
                        {"classId": "${ENV(LoginNameCourseAdmin_class1)}"},
                        {"classId": "${ENV(LoginNameCourseAdmin_class2)}"},
                        {"classId": "${ENV(LoginNameCourseAdmin_class3)}"},
                    ],
                    "discussType": 0,
                    "seeOtherClass": 1,
                    "postScore": 5,
                    "replyPostScore": 2,
                    "teacherRatingScore": 5,
                    "studentRatingScore": 1,
                    "fileList": [],
                }
            )
            .validate()
            .assert_equal("status_code", 200)
        ),
        Step(
            RunRequest("9")
            .get("/forum/${ENV(LoginNameCourseAdmin_ocId)}/0")
            .with_params(
                **{"pn": "1", "ps": "10", "teacherId": "${ENV(LoginNameCourseAdmin_userid)}", "lang": "zh"}
            )
            .with_headers(**{"Authorization": "${ENV(LoginNameCourseAdmin_token)}", "Content-Type": "application/json"})
            .extract()
            .with_jmespath("body.forumDiscussionList[0].discussionId","discussionId")
            .validate()
            .assert_equal("status_code", 200)
        ),
        Step(
            RunRequest("删除讨论")                  #删除讨论
            .delete("/forum/${ENV(LoginNameCourseAdmin_ocId)}/${discussionId}")
            .with_params(**{"lang": "zh"})
            .with_headers(
                **{
                    "Authorization": "${ENV(LoginNameCourseAdmin_token)}",
                    "Content-Type": "application/json"
                }
            )
            .validate()
            .assert_equal("status_code", 200)
        )
    ]


if __name__ == "__main__":
    TestCaseTest().test_start()
